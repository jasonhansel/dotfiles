" VIM CONFIGURATION
" Based heavily on: https://raw.githubusercontent.com/skwp/dotfiles/master/vimrc
" Optimized for use on Arch Linux, with many customizations of my own.


" VUNDLE INITIALIZATION & PLUGINS
" Based on Vundle's recommended setup code.

set nocompatible
filetype off

let $SUDO_ASKPASS=''

if has("termguicolors")     " set true colors
  set termguicolors
endif

" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

set pyxversion=3 encoding=utf-8

let g:ale_linters = {'rust': ['cargo'], 'javascript': ['eslint']}
let g:ale_linters_explicit = 1
filetype plugin indent on
let g:ale_sign_column_always=1
let g:ale_set_highlights=0
let g:ale_rust_cargo_check_all_targets=1
let g:ale_rust_rls_toolchain='stable'
let g:ale_lint_on_insert_leave=1
let g:ale_lint_on_text_changed='normal'
let g:ale_completion_enabled = 0 " TODO
let g:ale_maximum_file_size=1000000
set signcolumn=yes " always show sign column


set rtp+=~/.vim/bundle/Vundle.vim
call plug#begin('~/.vim/plugged')
" Plug 'gmarik/Vundle.vim'
Plug 'rust-lang/rust.vim' " before filetype on in vim-sesnible
Plug 'tpope/vim-sensible'
Plug 'chriskempson/base16-vim'
" needs  pip install --user neovim greenlet==0.4.10
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-eunuch'
Plug 'Shougo/deoplete.nvim'
Plug 'sebastianmarkow/deoplete-rust'
Plug 'vim-scripts/DetectIndent'
Plug 'rbgrouleff/bclose.vim'
Plug 'deoplete-plugins/deoplete-tag'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'w0rp/ale'
Plug 'tpope/vim-endwise'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
call plug#end()



" VIM SETTINGS
" =========================================================================

set notitle  " Don't set X11 window title
set number   " Show line numbers
set t_Co=256 " Force 256-color mode


" Fix dtach issues
set term=xterm-256color
autocmd VimResized * set term=xterm-256color

" Change viminfo location
set viminfo+=n~/.vim/viminfo

" https://shapeshed.com/vim-netrw/
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_altv = 1
let g:netrw_winsize = 25
" TODO fix other netrw issues
let g:netrw_fastbrowse=0

" PERSISTENT UNDO
" Keep undo history across sessions. Requires that ~/.vim/backups exist.

if has('persistent_undo')
  set undodir=~/.vim/backups
  set undofile
endif
set undoreload=50000
set matchpairs+=<:>

" Highlight current line, but only in currently-focused window
" http://vim.wikia.com/wiki/Highlight_current_line
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

set complete=d
set completeopt=menu,menuone,noinsert
set shortmess+=c
set splitright


" stop trying to fix final EOL
set nofixendofline


" Allow buffers to exist without being displayed
set hidden

" Override sensible.vim
set noshowcmd

" Make indentation use tabs, and set tab width to 4
set smartindent
set shiftwidth=4
set softtabstop=0
set tabstop=4
set expandtab

" Display tabs and trailing spaces
set list listchars=tab:\│\ ,trail:·

" Disable line wrapping by default
set nowrap
set linebreak
set sidescroll=1

" Disable code folding, except in vimdiff
if &diff
    set foldenable
else
    set nofoldenable
endif

" Search results
set hlsearch   " Highlight results
set ignorecase " Make search case-insensitive
set smartcase  " ... unless it contains a capital

" Mouse support
set ttymouse=xterm2
set mouse=a

" Color Scheme

set background=dark
colorscheme base16-pop

hi AirlineNormal guibg='#00d400' guifg='#000000'
hi AirlineInsert guibg='#00ddff' guifg='#000000'
hi AirlineTerminal guibg='#ff8d2d' guifg='#000000'
hi AirlineVisual guibg='#d5b51c' guifg='#000000'
hi DarkText guifg='#000000'
hi Normal guibg='#000000' ctermbg=0
hi Terminal guibg='#000000' ctermbg=0
hi CursorLine guibg=#262626
hi SignColumn guibg=#262626
hi ALEWarningSign guibg=#D78700 guifg=#D78700
hi AirlineWarning guibg=#D78700 guifg=#000000
hi ALEErrorLine guibg=NONE
hi ALEErrorSign guibg=#FF0000 guifg=#FF0000
hi AirlineError guibg=#FF0000 guifg=#000000

" https://stackoverflow.com/questions/2019281/load-different-colorscheme-when-using-vimdiff
highlight DiffAdd    NONE ctermbg=22
highlight DiffDelete guifg=fg guibg=#440000
highlight DiffChange guifg=fg guibg=#000044
highlight DiffText   guifg=fg guibg=#0000cc

" readability
hi Comment guifg='#888888'


" COMPLETION AND LINTING
" =========================================================================

let g:deoplete#enable_at_startup = 1
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" Use <tab> for completion
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<TAB>"

let g:deoplete#enable_ignore_case = 1
let g:deoplete#enable_on_insert_enter = 1
let g:deoplete#auto_refresh_delay = 0
let g:deoplete#enable_at_startup = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#auto_completion_start_length = 1
let g:deoplete#enable_refresh_always = 0

call deoplete#custom#source('_', 'matchers', ['matcher_full_fuzzy'])
let deoplete#tag#cache_limit_size = 100000000
call deoplete#custom#option('sources', { '_' : [ 'file', 'member', 'around','buffer', 'tag' ]  })
    " fix caching etc wrt above
call deoplete#custom#option('min_pattern_length', 1)

" Allow deoplete to see all relevant completions
call deoplete#custom#option('max_list', 1000)

" Set size of completion menu
call deoplete#custom#source('_', 'max_abbr_width', 10)
set pumheight=5


call deoplete#custom#source('_', 'matchers', ['matcher_head']) " , 'matcher_length'])
call deoplete#custom#source('file', 'enable_buffer_path', 10)
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#rust#racer_binary='/usr/bin/racer'
let g:deoplete#sources#rust#rust_source_path='/usr/src/rust/src'
let $RUST_SRC_PATH='/usr/src/rust/src'

" AIRLINE
" =========================================================================

" https://github.com/vim/vim/issues/453
let s:oldval = ""

function! SearchCount()
  let pos=getpos('.')
  try
    let keyString=@/
    if strlen(keyString) == 0
      return ""
    endif

    if getfsize(expand(@%)) > 100000
      return "Too Large"
    endif

    let cnt = ''
    redir => cnt
    silent exe '%s/' . keyString . '//nge'
    redir END
    let cnt = matchstr(cnt, '\d\+')
    if cnt == "0" || cnt == ""
      return "🔍 0/0"
    endif

    let nth = ''
    let rest = ''
    call setpos('.', pos)
    redir => rest
    silent exe 's/' . keyString . '\(.\{-}\%#\)\@=//nge'
    call setpos('.', pos)
    redir => nth
    silent exe '0,.-1s/' . keyString . '//nge'
    redir END
    let s:oldval = '🔍 ' . (matchstr( nth, '\d\+' ) + matchstr(rest,'\d\+')) . '/' . cnt. ''
    return s:oldval
  catch
    return "ERR".v:exception
  finally
    call setpos('.', pos)
    let s:oldval = "NONE"
  endtry
endfunction

call airline#parts#define_function('search2', 'SearchCount')


set noshowmode
let g:airline_powerline_fonts = 0
let g:airline_symbols_ascii = 1

let g:airline#extensions#ale#enabled = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_extensions = ['tabline',  'ale' ]
let g:airline_detect_spell=0
let g:airline_inactive_collapse=0
let g:airline_symbols_ascii=1
let g:airline_section_x = airline#section#create([])
let g:airline_section_y = airline#section#create(['search2', 'ale_warning_count','ale_error_count'])
let g:airline_section_z = airline#section#create(['linenr','maxlinenr'])

let mapleader=","

" Airline Tabline

let g:airline#extensions#tabline#buffer_idx_format = {
\ '0': '0·',
\ '1': '1·',
\ '2': '2·',
\ '3': '3·',
\ '4': '4·',
\ '5': '5·',
\ '6': '6·',
\ '7': '7·',
\ '8': '8·',
\ '9': '9·'
\}
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#tabnr_formatter = 'default'
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tabs = 0
let g:airline#extensions#tabline#exclude_preview = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#fnamecollapse = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#buffer_idx_mode = 1

" FZF
" =========================================================================

function! NewGitFiles()
  " Git files but put history first
  " TODO use gfiles.pl if available
  return fzf#run(fzf#wrap('gfiles', {
              \        'options': '--tiebreak=index --prompt "NewGitFiles> "',
              \        'source': 'git ls-files'
              \ }, 0))
endfunction

" Use layout (also forces terminal mode)
let g:fzf_layout = {'window': 'botright split'}

" Fix escape key and status bar in fzf
autocmd! FileType fzf
autocmd  FileType fzf setlocal laststatus=0
          \| tnoremap <buffer><nowait><silent> <Esc> <C-w>:bd!<CR>
          \| autocmd BufLeave <buffer> set laststatus=2

" MISC
" =========================================================================

" from SO: close all buffers that are hidden and not modified
" unlike BufOnly, this leaves modified buffers instead of erroring
" note need call Bcloseothers() -- a funciton not a command
function! Bcloseothers()
  let tpbl=[]
  let closed = 0
  call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
  for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
    if getbufvar(buf, '&mod') == 0
      silent execute 'Bclose' buf
      let closed += 1
    endif
  endfor
  echo "Closed ".closed." hidden buffers"
endfunction

let g:detectindent_preferred_expandtab = 1
let g:detectindent_preferred_indent = 4
autocmd BufReadPost * :DetectIndent

" KEY BINDINGS
" =========================================================================

" Allow keys to wrap around EOLs
set whichwrap=b,s,<,>,[,]

" paste with proper indent
nnoremap <Leader>p p
nnoremap p ]p

" Make < and > preserve selection in VISUAL mode
vnoremap < <gv
vnoremap > >gv


" Allow <C-w> shortcuts even in insert mode
imap <C-w> <Esc><C-w>
nmap <C-w>\|  <C-w>v
nmap <C-w>-  <C-w>s

" Ctrl-E closes current buffer (leaving windows in place)
nnoremap <silent> <C-e> :Bclose<CR>

" https://github.com/vim/vim/issues/2216
tnoremap <Esc> <c-\><c-n>
" below is needed to fix arrow-key issues; sadly, it breaks the <nowait> stuff
tnoremap <Esc>: <c-\><c-n>:
tnoremap <silent> <C-e> <C-\><C-n>:call term_sendkeys("","\<lt>Esc>")<CR>a

" https://stackoverflow.com/questions/13850914/vim-overloaded-mapping-for-multiple-modes
function! MapBoth(keys, rhs)
  execute 'nmap' '<silent>' a:keys a:rhs
  execute 'imap' '<silent>' a:keys '<C-o>'.a:rhs
  execute 'tmap' '<silent>' a:keys '<C-\><C-n>'.a:rhs
endfunction

" https://stackoverflow.com/questions/18546533/execute-plug-commands-in-vim
for i in [1,2,3,4,5,6,7,8,9]
  call MapBoth('<C-w>'.i, '<Plug>AirlineSelectTab'.i)
endfor

call MapBoth('<C-w>[', 'gT')
call MapBoth('<C-w>]', 'gt')
call MapBoth('<C-T>', ':ter ++close zsh<CR>')

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
  return deoplete#cancel_popup() . "\<CR>"
endfunction

" fzf mappings, partly borrowed from fzf.vim
nnoremap <silent> <C-o> :Files<CR>
nnoremap <silent> <C-p> :call NewGitFiles()<CR>
nnoremap <silent> <C-t> :Tags<CR>
nnoremap <silent> <M-p> :GFiles<CR>
nnoremap <silent> <C-n> :enew<CR>
nnoremap <silent> <C-i> :History<CR>
nnoremap <silent> <C-u> :Buffer<CR>


" Consistency - make 'Y' replace to EOL, like as with 'C'
nnoremap Y y$

" stuff I always hit by accident or find useless
nnoremap ~ <Nop>
nnoremap Q <Nop>
nnoremap M <Nop>
nnoremap X <Nop>
nnoremap U <Nop>
nnoremap R <Nop>
nnoremap # <Nop>
nnoremap _ <Nop>
nnoremap - <Nop>
nnoremap + <Nop>
nnoremap % <Nop>

nnoremap h <Nop>
nnoremap j ^
nnoremap k $
nnoremap l <Nop>
nnoremap H <Nop>
nnoremap J <Nop>
nnoremap K <Nop>
nnoremap L <Nop>

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" Use ~ to clear search highlighting
" https://stackoverflow.com/questions/657447/vim-clear-last-search-highlighting
nnoremap <silent> ~ :let @/=""<CR>

" Use ,, to go back to the previous file
nnoremap <silent> <leader>, :b#<CR>

" Use ; and ' to move tabs
nmap ; <Plug>AirlineSelectPrevTab
nmap ' <Plug>AirlineSelectNextTab

" Use '/' for 'gn' motions
nnoremap y/ ygn
nnoremap c/ cgn
nnoremap d/ dgn

" Use 's' to insert a single character, 'S' to append
nnoremap s i <Esc>r
nnoremap S a <Esc>r

" Use 'F10' to see curren tsyntax highlighting state
" https://vim.fandom.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

